name: Wheels

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
     - main
  release:
    types:
      - published

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v4
      with:
        name: dist-sdist
        path: dist/*.tar.gz


  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Upgrade pip/uv.
      run: |
        python -m pip install --upgrade pip uv

    - uses: bazel-contrib/setup-bazel@0.14.0
      with:
        bazelisk-cache: true
        disk-cache: ${{ github.workflow }}
        repository-cache: true

    - name: Set min macOS version
      if: runner.os == 'macOS'
      run: |
        echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV

    - name: Build wheels on ${{ matrix.os }} using cibuildwheel
      uses: pypa/cibuildwheel@v2.23.0
      env:
        CIBW_BUILD_VERBOSITY: 1
        CIBW_BUILD: "cp310-* cp311-* cp312-* cp-313*"
        CIBW_BUILD_FRONTEND: "build[uv]"
        CIBW_SKIP: "pp* *-musllinux_*"
        CIBW_ARCHS_LINUX: auto64 aarch64
        CIBW_ARCHS_WINDOWS: auto64
        CIBW_BEFORE_ALL_LINUX: bash .github/install_bazel.sh
        CIBW_ENVIRONMENT_LINUX: PATH=$PATH:$HOME/bin
        CIBW_TEST_REQUIRES: "pytest jax[cpu]"
        CIBW_TEST_COMMAND: pytest {project}/tests
        MACOSX_DEPLOYMENT_TARGET: "11.0"

    - name: Verify clean directory
      run: git diff --exit-code
      shell: bash

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        path: wheelhouse/*.whl
        name: dist-${{ matrix.os }}

  upload_all:
    name: Upload if release
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/setup-python@v5
    - uses: actions/download-artifact@v4
      with:
        name: dist
        pattern: dist-*
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}
